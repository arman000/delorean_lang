grammar Delorean
  rule line
    f:formula sp? ('#' .*)? <Line>
  end

  rule formula
    i:identifier sp? '=?' sp? e:expression <ParameterDefault>
    /
    i:identifier sp? '=?' <Parameter>
    /
    i:identifier sp? '=' sp? e:expression <Formula>
    /
    n:node_name ':' sp? p:node_name <SubNode>
    /
    n:node_name ':' <BaseNode>
  end

  rule node_name
    [A-Z] [a-zA-Z0-9_]*
  end

  rule expression
    op:unary_op sp? e:expression <UnOp>
    /
    'if' sp? v:expression sp?
    'then' sp? e1:expression sp?
    'else' sp? e2:expression <IfElse>
    /
    v:value sp? op:binary_op sp? e:expression <BinOp>
    /
    value
  end

  rule list_expr
    '[]' <ListExpr>
    /
    '[' sp? i:identifier sp? ':' sp? e1:expression sp? '|'
      sp? e2:expression sp? ']' <ListComprehension>
    /
    '[' sp? args:fn_args sp? ']' <ListExpr>
  end

  rule binary_op
    '+' / '-' / '*' / '/' / '%' / '==' / '!=' / '>=' / '<=' / '>' / '<' / '&&' / '||'
  end

  rule unary_op
    '!' / '-'
  end

  rule value
    number /
    string / 
    boolean / 
    script_call / 
    fn / 
    model_fn_getattr /
    model_fn / 
    node_getattr / 
    getattr /
    list_expr /
    '(' sp? e:expression sp? ')' <Expr>
  end

  # built-in functions
  rule fn
    fn:fn_name '(' sp? ')' <Fn>
    /
    fn:fn_name '(' sp? args:fn_args sp? ')' <Fn>
  end

  rule fn_args
    arg0:expression args_rest:(sp? ',' sp? args:fn_args)? <FnArgs>
  end

  rule model_fn
    m:model_name '.' fn:identifier '(' sp? ')' <ModelFn>
    /
    m:model_name '.' fn:identifier '(' sp? args:fn_args sp? ')' <ModelFn>
  end

  rule model_name
    class_name '::' model_name
    /
    class_name
  end

  rule fn_name
    [A-Z] [A-Z0-9]*
  end

  rule class_name
    [A-Z] [a-zA-Z0-9]*
  end

  # script calling
  rule script_call
    '@' i:identifier? '(' sp? al:kw_args sp? ')' <ScriptCall>
  end

  rule kw_args
    k:(i:identifier ':' sp?)? arg0:expression args_rest:(sp? ',' sp? al:kw_args)? <KwArgs>
  end

  rule node_getattr
    n:node_name '.' i:identifier <NodeGetAttr>
  end

  rule model_fn_getattr
    mfn:model_fn '.' i:identifier <ModelFnGetAttr>
  end

  rule getattr
    i:identifier '.' ga:getattr <GetAttr>
    /
    identifier
  end

  rule number
    decimal / integer
  end

  rule decimal
    [0-9]+ '.' [0-9]+ <Decimal>
  end

  rule integer
    [0-9]+ <Integer>
  end

  rule identifier
    [a-z] [a-zA-Z0-9_]* <Identifier>
  end

  rule boolean
    'true' <Boolean> / 'false' <Boolean>
  end

  rule string
    '"' ('\"' / !'"' .)* '"' <String>
    /
    "'" [^']* "'" <String>
  end

  rule sp
    [\s]+
  end
end
