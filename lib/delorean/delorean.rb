# Autogenerated from a Treetop grammar. Edits may be lost.


module Delorean
  include Treetop::Runtime

  def root
    @root ||= :line
  end

  module Line0
  end

  module Line1
    def f
      elements[0]
    end

  end

  def _nt_line
    start_index = index
    if node_cache[:line].has_key?(index)
      cached = node_cache[:line][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_formula
    s0 << r1
    if r1
      r3 = _nt_space
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
      if r2
        i5, s5 = index, []
        if has_terminal?('#', false, index)
          r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('#')
          r6 = nil
        end
        s5 << r6
        if r6
          s7, i7 = [], index
          loop do
            if index < input_length
              r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure("any character")
              r8 = nil
            end
            if r8
              s7 << r8
            else
              break
            end
          end
          r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
          s5 << r7
        end
        if s5.last
          r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
          r5.extend(Line0)
        else
          @index = i5
          r5 = nil
        end
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r4
      end
    end
    if s0.last
      r0 = instantiate_node(Line,input, i0...index, s0)
      r0.extend(Line1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:line][start_index] = r0

    r0
  end

  module Formula0
    def i
      elements[0]
    end

    def e
      elements[4]
    end
  end

  module Formula1
    def i
      elements[0]
    end

  end

  module Formula2
    def i
      elements[0]
    end

    def e
      elements[4]
    end
  end

  module Formula3
    def n
      elements[0]
    end

    def p
      elements[3]
    end
  end

  module Formula4
    def n
      elements[0]
    end

  end

  def _nt_formula
    start_index = index
    if node_cache[:formula].has_key?(index)
      cached = node_cache[:formula][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_identifier
    s1 << r2
    if r2
      r4 = _nt_space
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r3
      if r3
        if has_terminal?('=?', false, index)
          r5 = instantiate_node(SyntaxNode,input, index...(index + 2))
          @index += 2
        else
          terminal_parse_failure('=?')
          r5 = nil
        end
        s1 << r5
        if r5
          r7 = _nt_space
          if r7
            r6 = r7
          else
            r6 = instantiate_node(SyntaxNode,input, index...index)
          end
          s1 << r6
          if r6
            r8 = _nt_expression
            s1 << r8
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(ParameterDefault,input, i1...index, s1)
      r1.extend(Formula0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i9, s9 = index, []
      r10 = _nt_identifier
      s9 << r10
      if r10
        r12 = _nt_space
        if r12
          r11 = r12
        else
          r11 = instantiate_node(SyntaxNode,input, index...index)
        end
        s9 << r11
        if r11
          if has_terminal?('=?', false, index)
            r13 = instantiate_node(SyntaxNode,input, index...(index + 2))
            @index += 2
          else
            terminal_parse_failure('=?')
            r13 = nil
          end
          s9 << r13
        end
      end
      if s9.last
        r9 = instantiate_node(Parameter,input, i9...index, s9)
        r9.extend(Formula1)
      else
        @index = i9
        r9 = nil
      end
      if r9
        r0 = r9
      else
        i14, s14 = index, []
        r15 = _nt_identifier
        s14 << r15
        if r15
          r17 = _nt_space
          if r17
            r16 = r17
          else
            r16 = instantiate_node(SyntaxNode,input, index...index)
          end
          s14 << r16
          if r16
            if has_terminal?('=', false, index)
              r18 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure('=')
              r18 = nil
            end
            s14 << r18
            if r18
              r20 = _nt_space
              if r20
                r19 = r20
              else
                r19 = instantiate_node(SyntaxNode,input, index...index)
              end
              s14 << r19
              if r19
                r21 = _nt_expression
                s14 << r21
              end
            end
          end
        end
        if s14.last
          r14 = instantiate_node(Formula,input, i14...index, s14)
          r14.extend(Formula2)
        else
          @index = i14
          r14 = nil
        end
        if r14
          r0 = r14
        else
          i22, s22 = index, []
          r23 = _nt_node_name
          s22 << r23
          if r23
            if has_terminal?(':', false, index)
              r24 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure(':')
              r24 = nil
            end
            s22 << r24
            if r24
              r26 = _nt_space
              if r26
                r25 = r26
              else
                r25 = instantiate_node(SyntaxNode,input, index...index)
              end
              s22 << r25
              if r25
                r27 = _nt_node_name
                s22 << r27
              end
            end
          end
          if s22.last
            r22 = instantiate_node(SubNode,input, i22...index, s22)
            r22.extend(Formula3)
          else
            @index = i22
            r22 = nil
          end
          if r22
            r0 = r22
          else
            i28, s28 = index, []
            r29 = _nt_node_name
            s28 << r29
            if r29
              if has_terminal?(':', false, index)
                r30 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure(':')
                r30 = nil
              end
              s28 << r30
            end
            if s28.last
              r28 = instantiate_node(BaseNode,input, i28...index, s28)
              r28.extend(Formula4)
            else
              @index = i28
              r28 = nil
            end
            if r28
              r0 = r28
            else
              @index = i0
              r0 = nil
            end
          end
        end
      end
    end

    node_cache[:formula][start_index] = r0

    r0
  end

  module NodeName0
  end

  def _nt_node_name
    start_index = index
    if node_cache[:node_name].has_key?(index)
      cached = node_cache[:node_name][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('\G[A-Z]', true, index)
      r1 = true
      @index += 1
    else
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        if has_terminal?('\G[a-zA-Z0-9_]', true, index)
          r3 = true
          @index += 1
        else
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(NodeName0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:node_name][start_index] = r0

    r0
  end

  module Expression0
    def op
      elements[0]
    end

    def e
      elements[2]
    end
  end

  module Expression1
    def v
      elements[2]
    end

    def e1
      elements[6]
    end

    def e2
      elements[10]
    end
  end

  module Expression2
    def v
      elements[0]
    end

    def op
      elements[2]
    end

    def e
      elements[4]
    end
  end

  def _nt_expression
    start_index = index
    if node_cache[:expression].has_key?(index)
      cached = node_cache[:expression][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_unary_op
    s1 << r2
    if r2
      r4 = _nt_space
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r3
      if r3
        r5 = _nt_expression
        s1 << r5
      end
    end
    if s1.last
      r1 = instantiate_node(UnOp,input, i1...index, s1)
      r1.extend(Expression0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i6, s6 = index, []
      if has_terminal?('if', false, index)
        r7 = instantiate_node(SyntaxNode,input, index...(index + 2))
        @index += 2
      else
        terminal_parse_failure('if')
        r7 = nil
      end
      s6 << r7
      if r7
        r9 = _nt_space
        if r9
          r8 = r9
        else
          r8 = instantiate_node(SyntaxNode,input, index...index)
        end
        s6 << r8
        if r8
          r10 = _nt_expression
          s6 << r10
          if r10
            r12 = _nt_space
            if r12
              r11 = r12
            else
              r11 = instantiate_node(SyntaxNode,input, index...index)
            end
            s6 << r11
            if r11
              if has_terminal?('then', false, index)
                r13 = instantiate_node(SyntaxNode,input, index...(index + 4))
                @index += 4
              else
                terminal_parse_failure('then')
                r13 = nil
              end
              s6 << r13
              if r13
                r15 = _nt_space
                if r15
                  r14 = r15
                else
                  r14 = instantiate_node(SyntaxNode,input, index...index)
                end
                s6 << r14
                if r14
                  r16 = _nt_expression
                  s6 << r16
                  if r16
                    r18 = _nt_space
                    if r18
                      r17 = r18
                    else
                      r17 = instantiate_node(SyntaxNode,input, index...index)
                    end
                    s6 << r17
                    if r17
                      if has_terminal?('else', false, index)
                        r19 = instantiate_node(SyntaxNode,input, index...(index + 4))
                        @index += 4
                      else
                        terminal_parse_failure('else')
                        r19 = nil
                      end
                      s6 << r19
                      if r19
                        r21 = _nt_space
                        if r21
                          r20 = r21
                        else
                          r20 = instantiate_node(SyntaxNode,input, index...index)
                        end
                        s6 << r20
                        if r20
                          r22 = _nt_expression
                          s6 << r22
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
      if s6.last
        r6 = instantiate_node(IfElse,input, i6...index, s6)
        r6.extend(Expression1)
      else
        @index = i6
        r6 = nil
      end
      if r6
        r0 = r6
      else
        i23, s23 = index, []
        r24 = _nt_value
        s23 << r24
        if r24
          r26 = _nt_space
          if r26
            r25 = r26
          else
            r25 = instantiate_node(SyntaxNode,input, index...index)
          end
          s23 << r25
          if r25
            r27 = _nt_binary_op
            s23 << r27
            if r27
              r29 = _nt_space
              if r29
                r28 = r29
              else
                r28 = instantiate_node(SyntaxNode,input, index...index)
              end
              s23 << r28
              if r28
                r30 = _nt_expression
                s23 << r30
              end
            end
          end
        end
        if s23.last
          r23 = instantiate_node(BinOp,input, i23...index, s23)
          r23.extend(Expression2)
        else
          @index = i23
          r23 = nil
        end
        if r23
          r0 = r23
        else
          r31 = _nt_value
          if r31
            r0 = r31
          else
            @index = i0
            r0 = nil
          end
        end
      end
    end

    node_cache[:expression][start_index] = r0

    r0
  end

  def _nt_binary_op
    start_index = index
    if node_cache[:binary_op].has_key?(index)
      cached = node_cache[:binary_op][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if has_terminal?('+', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('+')
      r1 = nil
    end
    if r1
      r0 = r1
    else
      if has_terminal?('-', false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('-')
        r2 = nil
      end
      if r2
        r0 = r2
      else
        if has_terminal?('*', false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('*')
          r3 = nil
        end
        if r3
          r0 = r3
        else
          if has_terminal?('/', false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('/')
            r4 = nil
          end
          if r4
            r0 = r4
          else
            if has_terminal?('%', false, index)
              r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure('%')
              r5 = nil
            end
            if r5
              r0 = r5
            else
              if has_terminal?('==', false, index)
                r6 = instantiate_node(SyntaxNode,input, index...(index + 2))
                @index += 2
              else
                terminal_parse_failure('==')
                r6 = nil
              end
              if r6
                r0 = r6
              else
                if has_terminal?('!=', false, index)
                  r7 = instantiate_node(SyntaxNode,input, index...(index + 2))
                  @index += 2
                else
                  terminal_parse_failure('!=')
                  r7 = nil
                end
                if r7
                  r0 = r7
                else
                  if has_terminal?('>=', false, index)
                    r8 = instantiate_node(SyntaxNode,input, index...(index + 2))
                    @index += 2
                  else
                    terminal_parse_failure('>=')
                    r8 = nil
                  end
                  if r8
                    r0 = r8
                  else
                    if has_terminal?('<=', false, index)
                      r9 = instantiate_node(SyntaxNode,input, index...(index + 2))
                      @index += 2
                    else
                      terminal_parse_failure('<=')
                      r9 = nil
                    end
                    if r9
                      r0 = r9
                    else
                      if has_terminal?('>', false, index)
                        r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
                        @index += 1
                      else
                        terminal_parse_failure('>')
                        r10 = nil
                      end
                      if r10
                        r0 = r10
                      else
                        if has_terminal?('<', false, index)
                          r11 = instantiate_node(SyntaxNode,input, index...(index + 1))
                          @index += 1
                        else
                          terminal_parse_failure('<')
                          r11 = nil
                        end
                        if r11
                          r0 = r11
                        else
                          if has_terminal?('&&', false, index)
                            r12 = instantiate_node(SyntaxNode,input, index...(index + 2))
                            @index += 2
                          else
                            terminal_parse_failure('&&')
                            r12 = nil
                          end
                          if r12
                            r0 = r12
                          else
                            if has_terminal?('||', false, index)
                              r13 = instantiate_node(SyntaxNode,input, index...(index + 2))
                              @index += 2
                            else
                              terminal_parse_failure('||')
                              r13 = nil
                            end
                            if r13
                              r0 = r13
                            else
                              @index = i0
                              r0 = nil
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end

    node_cache[:binary_op][start_index] = r0

    r0
  end

  def _nt_unary_op
    start_index = index
    if node_cache[:unary_op].has_key?(index)
      cached = node_cache[:unary_op][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if has_terminal?('!', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('!')
      r1 = nil
    end
    if r1
      r0 = r1
    else
      if has_terminal?('-', false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('-')
        r2 = nil
      end
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:unary_op][start_index] = r0

    r0
  end

  module Value0
    def e
      elements[2]
    end

  end

  def _nt_value
    start_index = index
    if node_cache[:value].has_key?(index)
      cached = node_cache[:value][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_number
    if r1
      r0 = r1
    else
      r2 = _nt_string
      if r2
        r0 = r2
      else
        r3 = _nt_boolean
        if r3
          r0 = r3
        else
          r4 = _nt_fn
          if r4
            r0 = r4
          else
            r5 = _nt_model_fn_getattr
            if r5
              r0 = r5
            else
              r6 = _nt_model_fn
              if r6
                r0 = r6
              else
                r7 = _nt_node_getattr
                if r7
                  r0 = r7
                else
                  r8 = _nt_getattr
                  if r8
                    r0 = r8
                  else
                    i9, s9 = index, []
                    if has_terminal?('(', false, index)
                      r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
                      @index += 1
                    else
                      terminal_parse_failure('(')
                      r10 = nil
                    end
                    s9 << r10
                    if r10
                      r12 = _nt_space
                      if r12
                        r11 = r12
                      else
                        r11 = instantiate_node(SyntaxNode,input, index...index)
                      end
                      s9 << r11
                      if r11
                        r13 = _nt_expression
                        s9 << r13
                        if r13
                          r15 = _nt_space
                          if r15
                            r14 = r15
                          else
                            r14 = instantiate_node(SyntaxNode,input, index...index)
                          end
                          s9 << r14
                          if r14
                            if has_terminal?(')', false, index)
                              r16 = instantiate_node(SyntaxNode,input, index...(index + 1))
                              @index += 1
                            else
                              terminal_parse_failure(')')
                              r16 = nil
                            end
                            s9 << r16
                          end
                        end
                      end
                    end
                    if s9.last
                      r9 = instantiate_node(Expr,input, i9...index, s9)
                      r9.extend(Value0)
                    else
                      @index = i9
                      r9 = nil
                    end
                    if r9
                      r0 = r9
                    else
                      @index = i0
                      r0 = nil
                    end
                  end
                end
              end
            end
          end
        end
      end
    end

    node_cache[:value][start_index] = r0

    r0
  end

  module Fn0
    def fn
      elements[0]
    end

  end

  module Fn1
    def fn
      elements[0]
    end

    def args
      elements[3]
    end

  end

  def _nt_fn
    start_index = index
    if node_cache[:fn].has_key?(index)
      cached = node_cache[:fn][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_fn_name
    s1 << r2
    if r2
      if has_terminal?('(', false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('(')
        r3 = nil
      end
      s1 << r3
      if r3
        r5 = _nt_space
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s1 << r4
        if r4
          if has_terminal?(')', false, index)
            r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure(')')
            r6 = nil
          end
          s1 << r6
        end
      end
    end
    if s1.last
      r1 = instantiate_node(Fn,input, i1...index, s1)
      r1.extend(Fn0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i7, s7 = index, []
      r8 = _nt_fn_name
      s7 << r8
      if r8
        if has_terminal?('(', false, index)
          r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('(')
          r9 = nil
        end
        s7 << r9
        if r9
          r11 = _nt_space
          if r11
            r10 = r11
          else
            r10 = instantiate_node(SyntaxNode,input, index...index)
          end
          s7 << r10
          if r10
            r12 = _nt_fn_args
            s7 << r12
            if r12
              r14 = _nt_space
              if r14
                r13 = r14
              else
                r13 = instantiate_node(SyntaxNode,input, index...index)
              end
              s7 << r13
              if r13
                if has_terminal?(')', false, index)
                  r15 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure(')')
                  r15 = nil
                end
                s7 << r15
              end
            end
          end
        end
      end
      if s7.last
        r7 = instantiate_node(Fn,input, i7...index, s7)
        r7.extend(Fn1)
      else
        @index = i7
        r7 = nil
      end
      if r7
        r0 = r7
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:fn][start_index] = r0

    r0
  end

  module FnArgs0
    def args
      elements[3]
    end
  end

  module FnArgs1
    def arg0
      elements[0]
    end

    def args_rest
      elements[1]
    end
  end

  def _nt_fn_args
    start_index = index
    if node_cache[:fn_args].has_key?(index)
      cached = node_cache[:fn_args][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_expression
    s0 << r1
    if r1
      i3, s3 = index, []
      r5 = _nt_space
      if r5
        r4 = r5
      else
        r4 = instantiate_node(SyntaxNode,input, index...index)
      end
      s3 << r4
      if r4
        if has_terminal?(',', false, index)
          r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(',')
          r6 = nil
        end
        s3 << r6
        if r6
          r8 = _nt_space
          if r8
            r7 = r8
          else
            r7 = instantiate_node(SyntaxNode,input, index...index)
          end
          s3 << r7
          if r7
            r9 = _nt_fn_args
            s3 << r9
          end
        end
      end
      if s3.last
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        r3.extend(FnArgs0)
      else
        @index = i3
        r3 = nil
      end
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(FnArgs,input, i0...index, s0)
      r0.extend(FnArgs1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:fn_args][start_index] = r0

    r0
  end

  module ModelFn0
    def m
      elements[0]
    end

    def fn
      elements[2]
    end

  end

  module ModelFn1
    def m
      elements[0]
    end

    def fn
      elements[2]
    end

    def args
      elements[5]
    end

  end

  def _nt_model_fn
    start_index = index
    if node_cache[:model_fn].has_key?(index)
      cached = node_cache[:model_fn][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_model_name
    s1 << r2
    if r2
      if has_terminal?('.', false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('.')
        r3 = nil
      end
      s1 << r3
      if r3
        r4 = _nt_identifier
        s1 << r4
        if r4
          if has_terminal?('(', false, index)
            r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('(')
            r5 = nil
          end
          s1 << r5
          if r5
            r7 = _nt_space
            if r7
              r6 = r7
            else
              r6 = instantiate_node(SyntaxNode,input, index...index)
            end
            s1 << r6
            if r6
              if has_terminal?(')', false, index)
                r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure(')')
                r8 = nil
              end
              s1 << r8
            end
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(ModelFn,input, i1...index, s1)
      r1.extend(ModelFn0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i9, s9 = index, []
      r10 = _nt_model_name
      s9 << r10
      if r10
        if has_terminal?('.', false, index)
          r11 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('.')
          r11 = nil
        end
        s9 << r11
        if r11
          r12 = _nt_identifier
          s9 << r12
          if r12
            if has_terminal?('(', false, index)
              r13 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure('(')
              r13 = nil
            end
            s9 << r13
            if r13
              r15 = _nt_space
              if r15
                r14 = r15
              else
                r14 = instantiate_node(SyntaxNode,input, index...index)
              end
              s9 << r14
              if r14
                r16 = _nt_fn_args
                s9 << r16
                if r16
                  r18 = _nt_space
                  if r18
                    r17 = r18
                  else
                    r17 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s9 << r17
                  if r17
                    if has_terminal?(')', false, index)
                      r19 = instantiate_node(SyntaxNode,input, index...(index + 1))
                      @index += 1
                    else
                      terminal_parse_failure(')')
                      r19 = nil
                    end
                    s9 << r19
                  end
                end
              end
            end
          end
        end
      end
      if s9.last
        r9 = instantiate_node(ModelFn,input, i9...index, s9)
        r9.extend(ModelFn1)
      else
        @index = i9
        r9 = nil
      end
      if r9
        r0 = r9
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:model_fn][start_index] = r0

    r0
  end

  module ModelName0
    def class_name
      elements[0]
    end

    def model_name
      elements[2]
    end
  end

  def _nt_model_name
    start_index = index
    if node_cache[:model_name].has_key?(index)
      cached = node_cache[:model_name][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_class_name
    s1 << r2
    if r2
      if has_terminal?('::', false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 2))
        @index += 2
      else
        terminal_parse_failure('::')
        r3 = nil
      end
      s1 << r3
      if r3
        r4 = _nt_model_name
        s1 << r4
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(ModelName0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r5 = _nt_class_name
      if r5
        r0 = r5
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:model_name][start_index] = r0

    r0
  end

  module FnName0
  end

  def _nt_fn_name
    start_index = index
    if node_cache[:fn_name].has_key?(index)
      cached = node_cache[:fn_name][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('\G[A-Z]', true, index)
      r1 = true
      @index += 1
    else
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        if has_terminal?('\G[A-Z0-9]', true, index)
          r3 = true
          @index += 1
        else
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(FnName0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:fn_name][start_index] = r0

    r0
  end

  module ClassName0
  end

  def _nt_class_name
    start_index = index
    if node_cache[:class_name].has_key?(index)
      cached = node_cache[:class_name][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('\G[A-Z]', true, index)
      r1 = true
      @index += 1
    else
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        if has_terminal?('\G[a-zA-Z0-9]', true, index)
          r3 = true
          @index += 1
        else
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(ClassName0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:class_name][start_index] = r0

    r0
  end

  module NodeGetattr0
    def n
      elements[0]
    end

    def i
      elements[2]
    end
  end

  def _nt_node_getattr
    start_index = index
    if node_cache[:node_getattr].has_key?(index)
      cached = node_cache[:node_getattr][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_node_name
    s0 << r1
    if r1
      if has_terminal?('.', false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('.')
        r2 = nil
      end
      s0 << r2
      if r2
        r3 = _nt_identifier
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(NodeGetAttr,input, i0...index, s0)
      r0.extend(NodeGetattr0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:node_getattr][start_index] = r0

    r0
  end

  module ModelFnGetattr0
    def mfn
      elements[0]
    end

    def i
      elements[2]
    end
  end

  def _nt_model_fn_getattr
    start_index = index
    if node_cache[:model_fn_getattr].has_key?(index)
      cached = node_cache[:model_fn_getattr][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_model_fn
    s0 << r1
    if r1
      if has_terminal?('.', false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('.')
        r2 = nil
      end
      s0 << r2
      if r2
        r3 = _nt_identifier
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(ModelFnGetAttr,input, i0...index, s0)
      r0.extend(ModelFnGetattr0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:model_fn_getattr][start_index] = r0

    r0
  end

  module Getattr0
    def i
      elements[0]
    end

    def ga
      elements[2]
    end
  end

  def _nt_getattr
    start_index = index
    if node_cache[:getattr].has_key?(index)
      cached = node_cache[:getattr][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_identifier
    s1 << r2
    if r2
      if has_terminal?('.', false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('.')
        r3 = nil
      end
      s1 << r3
      if r3
        r4 = _nt_getattr
        s1 << r4
      end
    end
    if s1.last
      r1 = instantiate_node(GetAttr,input, i1...index, s1)
      r1.extend(Getattr0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r5 = _nt_identifier
      if r5
        r0 = r5
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:getattr][start_index] = r0

    r0
  end

  def _nt_number
    start_index = index
    if node_cache[:number].has_key?(index)
      cached = node_cache[:number][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_decimal
    if r1
      r0 = r1
    else
      r2 = _nt_integer
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:number][start_index] = r0

    r0
  end

  module Decimal0
  end

  def _nt_decimal
    start_index = index
    if node_cache[:decimal].has_key?(index)
      cached = node_cache[:decimal][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    s1, i1 = [], index
    loop do
      if has_terminal?('\G[0-9]', true, index)
        r2 = true
        @index += 1
      else
        r2 = nil
      end
      if r2
        s1 << r2
      else
        break
      end
    end
    r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
    s0 << r1
    if r1
      if has_terminal?('.', false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('.')
        r3 = nil
      end
      s0 << r3
      if r3
        s4, i4 = [], index
        loop do
          if has_terminal?('\G[0-9]', true, index)
            r5 = true
            @index += 1
          else
            r5 = nil
          end
          if r5
            s4 << r5
          else
            break
          end
        end
        if s4.empty?
          @index = i4
          r4 = nil
        else
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        end
        s0 << r4
      end
    end
    if s0.last
      r0 = instantiate_node(Decimal,input, i0...index, s0)
      r0.extend(Decimal0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:decimal][start_index] = r0

    r0
  end

  def _nt_integer
    start_index = index
    if node_cache[:integer].has_key?(index)
      cached = node_cache[:integer][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?('\G[0-9]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(Integer,input, i0...index, s0)
    end

    node_cache[:integer][start_index] = r0

    r0
  end

  module Identifier0
  end

  def _nt_identifier
    start_index = index
    if node_cache[:identifier].has_key?(index)
      cached = node_cache[:identifier][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('\G[a-z]', true, index)
      r1 = true
      @index += 1
    else
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        if has_terminal?('\G[a-zA-Z0-9_]', true, index)
          r3 = true
          @index += 1
        else
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(Identifier,input, i0...index, s0)
      r0.extend(Identifier0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:identifier][start_index] = r0

    r0
  end

  def _nt_boolean
    start_index = index
    if node_cache[:boolean].has_key?(index)
      cached = node_cache[:boolean][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if has_terminal?('true', false, index)
      r1 = instantiate_node(Boolean,input, index...(index + 4))
      @index += 4
    else
      terminal_parse_failure('true')
      r1 = nil
    end
    if r1
      r0 = r1
    else
      if has_terminal?('false', false, index)
        r2 = instantiate_node(Boolean,input, index...(index + 5))
        @index += 5
      else
        terminal_parse_failure('false')
        r2 = nil
      end
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:boolean][start_index] = r0

    r0
  end

  module String0
  end

  module String1
  end

  module String2
  end

  def _nt_string
    start_index = index
    if node_cache[:string].has_key?(index)
      cached = node_cache[:string][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    if has_terminal?('"', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('"')
      r2 = nil
    end
    s1 << r2
    if r2
      s3, i3 = [], index
      loop do
        i4 = index
        if has_terminal?('\"', false, index)
          r5 = instantiate_node(SyntaxNode,input, index...(index + 2))
          @index += 2
        else
          terminal_parse_failure('\"')
          r5 = nil
        end
        if r5
          r4 = r5
        else
          i6, s6 = index, []
          i7 = index
          if has_terminal?('"', false, index)
            r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('"')
            r8 = nil
          end
          if r8
            r7 = nil
          else
            @index = i7
            r7 = instantiate_node(SyntaxNode,input, index...index)
          end
          s6 << r7
          if r7
            if index < input_length
              r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure("any character")
              r9 = nil
            end
            s6 << r9
          end
          if s6.last
            r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
            r6.extend(String0)
          else
            @index = i6
            r6 = nil
          end
          if r6
            r4 = r6
          else
            @index = i4
            r4 = nil
          end
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      s1 << r3
      if r3
        if has_terminal?('"', false, index)
          r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('"')
          r10 = nil
        end
        s1 << r10
      end
    end
    if s1.last
      r1 = instantiate_node(String,input, i1...index, s1)
      r1.extend(String1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i11, s11 = index, []
      if has_terminal?("'", false, index)
        r12 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure("'")
        r12 = nil
      end
      s11 << r12
      if r12
        s13, i13 = [], index
        loop do
          if has_terminal?('\G[^\']', true, index)
            r14 = true
            @index += 1
          else
            r14 = nil
          end
          if r14
            s13 << r14
          else
            break
          end
        end
        r13 = instantiate_node(SyntaxNode,input, i13...index, s13)
        s11 << r13
        if r13
          if has_terminal?("'", false, index)
            r15 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("'")
            r15 = nil
          end
          s11 << r15
        end
      end
      if s11.last
        r11 = instantiate_node(String,input, i11...index, s11)
        r11.extend(String2)
      else
        @index = i11
        r11 = nil
      end
      if r11
        r0 = r11
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:string][start_index] = r0

    r0
  end

  def _nt_space
    start_index = index
    if node_cache[:space].has_key?(index)
      cached = node_cache[:space][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?('\G[\\s]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:space][start_index] = r0

    r0
  end

end

class DeloreanParser < Treetop::Runtime::CompiledParser
  include Delorean
end

